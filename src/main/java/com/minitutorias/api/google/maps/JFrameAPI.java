/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.minitutorias.api.google.maps;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.maps.GeoApiContext;
import com.google.maps.GeocodingApi;
import com.google.maps.StaticMapsApi;
import com.google.maps.StaticMapsRequest;
import com.google.maps.StaticMapsRequest.Markers;
import com.google.maps.errors.ApiException;
import com.google.maps.model.GeocodingResult;
import com.google.maps.model.LatLng;
import com.google.maps.model.Size;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author Esteban
 */
public class JFrameAPI extends javax.swing.JFrame {

    /**
     * Creates new form JFrameAPI
     */
    public JFrameAPI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagenMapa = new javax.swing.JLabel();
        generarMapa = new javax.swing.JButton();
        textFieldDireccion = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        checkBoxTipoEntrada = new javax.swing.JCheckBox();
        spinnerLatitud = new javax.swing.JSpinner();
        spinnerLongitud = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        spinnerZoom = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prueba API");

        generarMapa.setText("Generar Mapa");
        generarMapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarMapaActionPerformed(evt);
            }
        });

        jLabel1.setText("Latitud");

        jLabel2.setText("Longitud");

        jLabel3.setText("Dirección");

        checkBoxTipoEntrada.setText("Usar Latitud y Longitud");

        spinnerLatitud.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));
        spinnerLatitud.setToolTipText("");

        spinnerLongitud.setModel(new javax.swing.SpinnerNumberModel(0.0d, null, null, 1.0d));

        jLabel4.setText("Zoom");

        spinnerZoom.setModel(new javax.swing.SpinnerNumberModel(1, 1, 20, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imagenMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(generarMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkBoxTipoEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spinnerLatitud)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(spinnerLongitud))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnerZoom, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldDireccion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagenMapa, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkBoxTipoEntrada))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(generarMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spinnerLatitud)
                    .addComponent(spinnerLongitud)
                    .addComponent(spinnerZoom)
                    .addComponent(textFieldDireccion))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generarMapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarMapaActionPerformed
        this.setTitle("Prueba API: Elaborando Información");
        //Primero necesito un constructor de contextos para poder pasarlos los parámetros a la API
        GeoApiContext context = new GeoApiContext.Builder()
            .apiKey("AIza....").maxRetries(3)
            .build();
        
        try{
            //Ahora contacto la API utilzando los contextos, y el constructor, con una capacidad máxima de 3 intentos
            //Si se desea usar el método por dirección textual:
            double latitud, longitud;
            if(!this.checkBoxTipoEntrada.isSelected()){
                GeocodingResult[] results =  GeocodingApi.geocode(context,
                    this.textFieldDireccion.getText()).await();
                Gson gson = new GsonBuilder().setPrettyPrinting().create();
                //System.out.println(gson.toJson(results[0].addressComponents));
                //Revisar la dirección que nos retornó la API
                latitud = Double.parseDouble(gson.toJson(results[0].geometry.location.lat));
                longitud = Double.parseDouble(gson.toJson(results[0].geometry.location.lng));
            }
            else{
                latitud = (Double)this.spinnerLatitud.getValue();
                longitud = (Double)this.spinnerLongitud.getValue();
            }
            
            //Ahora a intentar colocar la imagen, será del tamaño del label de la imagen

            //Primero construir un objeto que manejará la petición de la imagen
            StaticMapsRequest req = StaticMapsApi.newRequest(context, new Size(this.imagenMapa.getWidth(), this.imagenMapa.getHeight()));
            //Le pido que la centre en el sitio retornado por la API
            LatLng latLng = new LatLng(latitud, longitud);
            req.center(latLng);
            //Ahora el zoom
            req.zoom((Integer)this.spinnerZoom.getValue());
            //Ahora agregar marcadores, en este caso, sólo quiero uno, en dónde se centró
            Markers markers = new Markers();
            //tamaño pequeño
            markers.size(Markers.MarkersSize.small);
            //color azul
            markers.color("red");
            //el sitio del marcador, se pueden agregar varios sitios
            markers.addLocation(latLng);
            //finalmente colocarle los marcadores
            req.markers(markers);
            
            //Cambiarle el título a cargando
            this.setTitle("Prueba API: Cargando");
            //Ahora solicito la imagen
            ByteArrayInputStream bais = new ByteArrayInputStream(req.await().imageData);
            //Y finalmente la cargo por IO
            BufferedImage destinyImage = ImageIO.read(bais);
            
            //Ahora que tengo la imagen dentro, necesito redimensionarla
            Image rescaledDestinyImage = destinyImage.getScaledInstance(this.imagenMapa.getWidth(), this.imagenMapa.getHeight(), Image.SCALE_DEFAULT);
            this.imagenMapa.setIcon(new ImageIcon(rescaledDestinyImage));
            this.setTitle("Prueba API");
        }catch(IndexOutOfBoundsException | ApiException | InterruptedException | IOException exc){
            this.setTitle("Prueba API: Error");
            Logger.getLogger(apitest.class.getName()).log(Level.SEVERE, null, exc);
        }
    }//GEN-LAST:event_generarMapaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameAPI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameAPI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameAPI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameAPI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameAPI().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBoxTipoEntrada;
    private javax.swing.JButton generarMapa;
    private javax.swing.JLabel imagenMapa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSpinner spinnerLatitud;
    private javax.swing.JSpinner spinnerLongitud;
    private javax.swing.JSpinner spinnerZoom;
    private javax.swing.JTextField textFieldDireccion;
    // End of variables declaration//GEN-END:variables
}
